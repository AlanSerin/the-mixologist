{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Header","callfunction","toggleList","useState","searchType","changeSearchType","text","changeText","pltext","Navbar","className","bg","expand","Brand","href","onClick","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","onChange","e","target","value","type","placeholder","Button","variant","NameBody","name","image","ingredients","instructions","Container","Row","Col","xs","md","Image","src","rounded","map","ingredient","index","ListBody","list","details","prop","sm","Card","style","width","Img","strDrinkThumb","Body","Title","strDrink","Text","idDrink","App","showList","changeShowList","changeName","changeImage","changeIngredients","changeInstructions","drinklist","changeDrinklist","React","useEffect","getRandom","console","log","fetch","then","response","json","jsonData","assignData","catch","error","assignList","y","drinks","length","i","push","strInstructions","ing","includes","glasstype","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c98b369.chunk.js","sourcesContent":["import { Navbar,Nav,NavDropdown,Form,FormControl,Button,Card,Image,Container,Row,Col  } from 'react-bootstrap';\nimport './App.css';\nimport React , { useState, Component } from 'react';\n\nconst Header = ({callfunction,toggleList}) =>{\n \n  const [searchType,changeSearchType] = useState(\"name\");\n  const [text,changeText] = useState(\"name\");\n  let pltext = `Search by ${searchType}`;\n\n  const startSearch = () => {\n    console.log(searchType);\n  }\n\n  return(\n    <Navbar className=\"px-5\" bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"\" onClick = {toggleList}>The Mixologist</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Surprise me</Nav.Link>\n          <NavDropdown title=\"Search option\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item onClick={() => changeSearchType(\"name\")}>Search by name</NavDropdown.Item>\n            <NavDropdown.Item onClick={() => changeSearchType(\"ingredient\")}>Search by ingredient</NavDropdown.Item>\n            <NavDropdown.Item onClick={() => changeSearchType(\"glass\")}>Search by glass</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item href=\"#action/3.4\">Search non-alcoholic drinks</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        <Form inline>\n          <FormControl onChange={(e)=> {changeText(e.target.value)}} type=\"text\" placeholder= {pltext} className=\"mr-sm-2\" />\n          <Button onClick={() => callfunction(text,searchType)} variant=\"outline-info\">Search</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nconst NameBody = ({name,image,ingredients,instructions}) => {\n  \n\n  //getData();\n\n  return (\n    <div className=\"vertical-center\">\n      <Container>\n        <Row>\n          <Col xs={12} md={6}>\n            <Image className=\"w-100\" src={image} rounded />\n          </Col>\n          <Col xs={12} md={6}>\n            <Row className = \"justify-content-start\">\n              <h1 className= \"drinktitle\">{name}</h1>\n            </Row>\n            <Row className = \"justify-content-end\">\n              <h3 className=\"cocktail\">Cocktail</h3>\n            </Row>\n            <hr></hr>\n            <Row className=\"topmargin\">\n              <Col xs={12} md={6}>\n                <h3>Ingredients</h3>\n                <div className=\"mt-4\" variant = \"flush\">{ingredients.map((ingredient,index) => <p key={index} >{ingredient}</p>)}</div>\n              </Col>\n              <Col xs={12} md={6}>\n                <h3>Instructions</h3>\n                <div className=\"mt-4\" variant = \"flush\">{instructions}</div>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nconst ListBody = ({list,details}) => {\n  return(\n    <div>\n      <Container className=\"my-5\">\n        <Row> \n            {list.map((prop,index) => {\n             return (\n              <Col key={index} xs={12} sm={6} md={4}>\n                <Card className=\"mb-5\" style={{ width: '18rem' }}>\n                  <Card.Img variant=\"top\" src={prop.strDrinkThumb} />\n                  <Card.Body>\n                    <Card.Title>{prop.strDrink}</Card.Title>\n                    <Card.Text>\n                      Some quick example text to build on the card title and make up the bulk of\n                      the card's content.\n                    </Card.Text>\n                    <Button onClick = {() => details(prop.idDrink)} variant=\"primary\">See the recipe</Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n             );\n            })}\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nfunction App() {\n\n  const[showList,changeShowList] = useState(false);\n  const [search,changeSearch] = useState();\n  const [name,changeName] = useState();\n  const [image,changeImage] = useState();\n  const [ingredients,changeIngredients] = useState([]);\n  const [instructions,changeInstructions] = useState();\n  const [drinklist,changeDrinklist] = useState([]);\n\n  React.useEffect(() => {\n    getRandom();\n  }, []);\n  \n  const getRandom = () => {\n    console.log(\"random\");\n    fetch(\"https://www.thecocktaildb.com/api/json/v1/1/random.php\")\n    .then(response => response.json())\n    .then((jsonData) => {\n      // jsonData is parsed json object received from url\n      console.log(jsonData);\n      assignData(jsonData);\n    })\n    .catch((error) => {\n      // handle your errors here\n      console.error(error)\n    })\n    changeShowList(false);\n  }\n\n  const fetchIDData = (id) => {\n    fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`)\n      .then(response => response.json())\n      .then((jsonData) => {\n        // jsonData is parsed json object received from url\n        console.log(jsonData);\n        console.log(id);\n        assignData(jsonData);\n      })\n      .catch((error) => {\n        // handle your errors here\n        console.error(error)\n      })\n  }\n\n\n  const getData = (text,type) => {\n    console.log(\"asdasdasdasdasd\");\n    console.log(text,type);\n    if(type == \"name\"){\n      fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${text}`)\n      .then(response => response.json())\n      .then((jsonData) => {\n        // jsonData is parsed json object received from url\n        console.log(jsonData);\n        assignData(jsonData);\n      })\n      .catch((error) => {\n        // handle your errors here\n        console.error(error)\n      })\n    }\n    else if (type == \"ingredient\"){\n      fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${text}`)\n      .then(response => response.json())\n      .then((jsonData) => {\n        // jsonData is parsed json object received from url\n        console.log(jsonData);\n        assignList(jsonData);\n      })\n      .catch((error) => {\n        // handle your errors here\n        console.error(error)\n      })\n    }\n    else{\n      let glasstype = \"\"; \n      switch(text){\n        case \"champagne\" : glasstype = \"flute\"; break;\n        case \"brandy\" : glasstype = \"snifter\"; break; \n        case \"coffee\" : glasstype = \"mug\";break;\n        default : glasstype = \"glass\";\n      }\n      fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?g=${text}_${glasstype}`)\n      .then(response => response.json())\n      .then((jsonData) => {\n        // jsonData is parsed json object received from url\n        console.log(jsonData);\n        assignList(jsonData);\n      })\n      .catch((error) => {\n        // handle your errors here\n        console.error(error)\n      })\n    }\n  }\n\n  const assignList = (jsonData) => {\n    console.log(drinklist);\n    let y = [];\n    if(jsonData.drinks.length > 10){\n      for(var i= 0; i < 10; i++){\n        y.push(jsonData.drinks[i])\n        console.log(y);\n      }\n    }\n    else{\n      for(var i= 0; i < jsonData.drinks.length; i++){\n        y.push(jsonData.drinks[i])\n        console.log(y);\n      }\n    }\n    changeDrinklist(y);\n    console.log(drinklist);\n    console.log(y);\n    changeShowList(true);\n  }\n\n  const assignData = (jsonData) => {\n    changeName(jsonData.drinks[0].strDrink);\n    changeImage(jsonData.drinks[0].strDrinkThumb);\n    changeInstructions(jsonData.drinks[0].strInstructions);\n    console.log(image);\n    let y = [];\n    for(var ing in jsonData.drinks[0]){\n      if(ing.includes(\"strIngredient\")){\n        if(jsonData.drinks[0][ing] != null){\n          console.log(jsonData.drinks[0][ing]);\n          y.push(jsonData.drinks[0][ing]);\n        }\n      }\n    }\n    changeIngredients(y);\n    changeShowList(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header toggleList = {() => changeShowList(false)} callfunction={getData} />\n      {showList === false ?<NameBody \n        name = {name}\n        image = {image}\n        ingredients = {ingredients}\n        instructions = {instructions}\n        /> : <ListBody details = {fetchIDData} list= {drinklist}></ListBody> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}